<section>
	<h1>Interface</h1>
	<p class="couleurGris">Les fenêtres principales de l'éditeur.</p>
	<div class="blocSommaire">
		<p>Sommaire</p>
		<ol id="sommaire">
			<li><a href="#references">Références</a></li>
			<li><a href="#scenegame">Scene, game</a></li>
			<li><a href="#hierarchy">Hierarchy</a></li>
			<li><a href="#project">Project</a></li>
			<li><a href="#inspector">Inspector</a></li>
			<li><a href="#controles">Contrôles en édition</a></li>
			<li><a href="#couleurs">Couleurs</a></li>
			<li><a href="#console">Console</a></li>
			<li><a href="#layout">Layout</a></li>
		</ol>
	</div>
</section>
<section id="references">
	<h2>Références</h2>
	<p>Documentation officielle : </p>
	<a class="lien" target="_blank" title="L'éditeur" href="https://docs.unity3d.com/Manual/UsingTheEditor.html">L'éditeur</a>
	<a class="lien" target="_blank" title="Personnaliser l'espace de travail" href="https://docs.unity3d.com/Manual/CustomizingYourWorkspace.html">Personnaliser l'espace de travail</a>
	<a class="lien" target="_blank" title="Fichiers log" href="https://docs.unity3d.com/Manual/LogFiles.html">Fichiers log</a>
</section>
<section id="scenegame">
	<h2>Scene, game</h2>
	<p>Un jeu contient bon nombre de scènes qui sont autant d'emplacements où se produit l'action :</p>
	<ul>
		<li>scène d'introduction avec les <i>splash screens</i>,</li>
		<li>scène de menus,</li>
		<li>scènes des crédits,</li>
		<li>une ou plusieurs scènes du jeu proprement dit.</li>
	</ul>
	<p>Une scène est un fichier apparaissant dans la fenêtre <code>Project</code>. Double-cliquer dessus pour la charger.</p>
	<p>Pour revenir à l'état d'origine d'une scène, simplement ne pas enregistrer la version courante et recharger le fichier en double-cliquant sur son icone dans la fenêtre <code>Project</code>.</p>
	<p>On <strong>édite</strong> la scène : les données sont conservées. On <strong>teste</strong> une scène ou on en lance la <strong>simulation</strong> en cliquant sur le bouton <code>Play</code>. Lorsqu'on clique sur le bouton <code>Play</code> à nouveau, la simulation s'arrête et on retourne en édition. On passe en fait d'une fenêtre <code>Scene</code> à une fenêtre <code>Game</code>. En mode <code>Game</code>, toutes les données peuvent être modifiées mais ne seront pas conservées une fois la simulation terminée (sauf intervention sur les fichiers eux-mêmes) ; cela permet de tester des valeurs. On peut faire une pause dans la simulation en cliquant sur le bouton <code>Pause</code> ; cliquer à nouveau et le jeu reprend.</p>
	<p>La fenêtre <code>Game</code> présente des menus. Le premier concerne le rapport ou format d'écran dans lequel afficher le jeu. La fenêtre <code>Game</code> peut être zoomée, ce qui modifie la qualité du rendu. La fenêtre <code>Scene</code> présente aussi des menus, qui peuvent lui être spécifiques ou bien être les mêmes que ceux de la fenêtre <code>Game</code> :</p>
	<ul>
		<li>type d'affichage,</li>
		<li>activer/désactiver l'éclairage avec l'icone représentant un soleil,</li>
		<li>affichage des gizmo,</li>
		<li>etc.</li>
	</ul>
</section>
<section id="hierarchy">
	<h2>Hierarchy</h2>
	<p>La fenêtre <code>Hierarchy</code> présente les <strong>objets utilisés dans la scène</strong> courante, chargée.</p>
	<p>En mode <strong>simulation (<i>game</i>)</strong>, la liste de la fenêtre <code>Hierarchy</code> peut </strong>varier</strong>. Exemple : apparition d'ennemis.</p>
	<p>Une bonne pratique est de créer des objets vides et les utiliser comme <strong>catégories</strong> afin d'éviter que tous les objets ne soient au même niveau de la scène. Cela permet aussi des traitement par l'objet parent.</p>
</section>
<section id="project">
	<h2>Project</h2>
	<p>La fenêtre <code>Project</code> présente tous les <i>assets</i> du jeu : scripts, textures, fontes... C'est la représentation de ce qui existe sur l'ordinateur, dans le dossier du projet.</p>
	<p>Un <strong><i>slider</i></strong> permet de modifier le zoom pour obtenir un affichage en <strong>icones</strong> ou en <strong>liste de noms</strong>.</p>
</section>
<section id="inspector">
	<h2>Inspector</h2>
	<p>Les <strong>propriétés</strong> de l'objet sélectionné s'affichent dans la fenêtre <code>Inspector</code>. Ces propriétés sont classées par <strong>composant (<i>component</i>)</strong>.</p>
	<p>Ce qui est affiché peut porter sur un objet de la <code>Hierarchy</code> ou du <code>Project</code>.</p>
	<p>Toute modification en <code>Inspector</code> peut être annulée/rétablie avec <code>CTRL+Z</code>.</p>
	<p>Clic droit sur l'onglet de cette fenêtre offre la possibilité de passer l'<code>Inspector</code> en mode <code>Debug</code> (utile en mode <code>Game</code>). On peut créer autant de fenêtres que l'on veut. On peut aussi  verrouiller la sélection d'un <code>Inspector</code> avec l'icone cadenas en haut à droite (cela permet des comparaisons, éditions...).</p>
</section>
<section id="controles">
	<h2>Contrôles en édition</h2>
	<p>En édition, dans la fenêtre de <code>Scene</code>, le <strong>repère</strong> ou <i>gizmo</i> en haut à droite indique l'orientation de la caméra selon les axes x, y, z. Cliquer sur un axe fait basculer la vue sur cet axe.</p>
	<p>Unity utilise les repères dits « <strong>main gauche</strong> » :</p>
	<ul>
		<li>x : droite,</li>
		<li>y : haut,</li>
		<li>z : profondeur.</li>
	</ul>
	<p>Sous le repère, on peut choisir le <strong>mode de projection</strong> de la caméra de la scène (pas de la caméra du jeu) : <strong>perspective</strong> ou <strong>orthographique</strong> (on peut cliquer sur le cube pour le même résultat).</p>
	<p>Contrôles <strong>souris</strong> :</p>
	<ul>
		<li>la molette souris contrôle le zoom,</li>
		<li>clic-droit enfoncé permet de tourner la caméra sur son axe,</li>
		<li>clic-droit + <code>WASD</code> pour déplacer à vol d'oiseau, <code>SHIFT</code> pour modifier la vitesse,</li>
		<li><code>ALT</code> + clic-droit maintenu fait tourner la caméra autour de l'objet sélectionné,</li>
		<li>click molette/<code>CTRL+ALT</code> et déplacer pour déplacer la caméra.</li>
	</ul>
	<p>En haut à gauche de l'écran se trouvent des <strong>boutons de contrôle</strong> (<code>QWERTY</code> au clavier):</p>
	<ul>
		<li><code>Main</code> : se déplacer dans la scène,</li>
		<li><code>Croix directionnelle</code> : déplacer un objet sur l'axe x, y ou z ou sur un plan,</li>
		<li><code>Rotation</code> : faire pivoter un objet sur le plan x, y ou z, ou localement par rapport à la caméra, ou au milieu des axes pour tourner sur les 3 axes,</li>
		<li><code>Echelle</code> : changer la taille de l'objet en x, y, ou z, les 3 à la fois avec le cube central,</li>
		<li><code>Rectangle</code> : redimensionner sur une forme plane pour les éléments 2D, par plan pour un objet 3D,</li>
		<li><code>Combo</code> : translation, rotation, échelle,</li>
		<li><code>Clé et crayon</code> : fournit un outil selon les options de composant ou selon les <i>plugs-in</i> installés (exemple : édition de la forme du <code>collider</code>).</li>
	</ul>
	<p>Bouton <code>Pivot/Center</code> : change le point de contrôle de l'objet à <strong>pivot</strong> (point d'origine de création de l'objet) ou <strong>centre</strong>. Par défaut, le point pivot de l'objet dans Unity est en son centre.</p>
	<p>Bouton <code>Global/Local</code> : axes en référence à la <strong>scène (global)</strong> ou <strong>à l'objet (local)</strong>.</p>
	<p>Pour <code>trouver</code> un objet particulier dans la scène (exemple : l'objet jouable) :</p>
	<ul>
		<li>soit on cherche visuellement, on sélectionne l'objet et on appuie sur <code>F</code> pour focaliser la vue sur l'objet,</li>
		<li>soit on va dans la fenêtre <code>Hierarchy</code> et on double-clique l'objet en question ; la vue est alors focalisée sur l'objet.</li>
	</ul>
	<p><code>CTRL+D</code> permet de <strong>dupliquer</strong> un objet à l'endroit de l'objet original.</p>
	<p><strong>Sélectionner</strong> :</p>
	<ul>
		<li><code>SHIFT</code> + clic-gauche en <code>Hierarchy</code> sélectionne une plage d'objets,</li>
		<li><code>CTRL</code> + clic-gauche ajoute un objet cliqué à la sélection,</li>
		<li>dans la scène, dessiner un rectangle de sélection avec clic-gauche enfoncé puis déplacement.</li>
	</ul>
	<p>Pour <strong>positionner</strong> des objets dans la scène :</p>
	<ul>
		<li>on peut utiliser les propriétés du composant <code>Transform</code> de chaque objet (position, rotation, échelle),</li>
		<li>on peut aussi déplacer les objets par <strong>crans de 1 unité (mètre)</strong> avec la touche <code>CTRL</code> enfoncée pendant le déplacement,</li>
		<li>Unity gère le <strong><i>vertex snapping</i></strong> : sélectionner l'objet non en pivot mais en centre, utiliser la touche <code>V</code> ou <code>CTRL+SHIFT</code> pour que le positionnement s'effectue le long d'un des surfaces.</li>
	</ul>
	<p>Toute modification effectuée à un objet est <strong>répercutée à ses enfants</strong> mais pas l'inverse.</p>
</section>
<section id="couleurs">
	<h2>Couleurs</h2>
	<p>Toutes les couleurs utilisées sont <strong>modifiables</strong> dans : menu <code>Edit > Preferences... > Colors</code>.</p>
	<ul>
		<li><code>Playmode tint</code> : le filtre de couleur lorsqu'on passe en <code>Game</code>,</li>
		<li>tout autre élément, gizmo...</li>
	</ul>
</section>
<section id="console">
	<h2>Console</h2>
	<p>Les <strong>messages</strong> d'Unity apparaissent dans la <code>Console</code> et peuvent aussi être scriptés au besoin :</p>
	<ul>
		<li><strong><i>Messages</i></strong> : quelconques, d'information ; <code>Debug.Log()</code>,</li>
		<li><strong><i>Warnings</i></strong> : messages d'erreur non bloquants ; <code>Debug.LogWarning()</code>,</li>
		<li><strong><i>Errors</i></strong> : messages en rouge et arrêt de script ; <code>Debug.LogError()</code>.</li>
	</ul>
	<p>Options :</p>
	<ul>
		<li><code>Clear</code> : tout effacer,</li>
		<li><code>Collapse</code> : rassembler les mêmes messages en une ligne,</li>
		<li><code>Clear on Play</code> : effacer tout au lancement de la simulation,</li>
		<li><code>Clear on Build</code> : effacer lors du <i>build</i> du projet (export vers une plateforme),</li>
		<li><code>Error Pause</code> : <strong>pause</strong> l'exécution du script lorsqu'il y a erreur bloquante afin de permettre d'<strong>explorer les valeurs</strong> actuelles au moment de cette erreur,</li>
		<li><code>Editor</code> : <code>Full log</code> fournit les informations complètes de suivi.</li>
	</ul>
	<p>Les entrées <code>Debug.Log</code> sont enregistrées dans des <strong>fichiers log</strong>.</p>
	<p>Astuce : pour debug un <code>array</code> sans boucler dessus, utiliser <code>string.Join()</code> car Unity n'opère aucune conversion automatique :</p>
	<pre><code>
Debug.Log(string.Join(", ", monArray));
	</code></pre>
	<p>Une méthode personnelle de <i>debug</i>, qu'on modifiera au besoin :</p>
	<pre><code>
using System.Reflection;
void MyDebug(string message)
{
	string objName = gameObject.name;
	string className = this.GetType().Name;
	string methodName = MethodBase.GetCurrentMethod().Name;
	Debug.LogError($"[{objName}][{className}][{methodName}] {message}");
}
	</code></pre>
</section>
<section id="layout">
	<h2>Layout</h2>
	<p>Les <strong><i>layouts</i></strong> sont des distributions des fenêtres. Le menu se trouve en haut à droite de l'écran d'Unity, dans la barre d'outils.</p>
	<p>Sur Windows, les <i>layouts</i> personnels se trouvent dans : <code>C:\Users\[nom]\AppData\Roaming\Unity\Editor-5.x\Preferences\Layouts\default</code>.</p>
	<p>Penser à faire des sauvegardes car des versions d'Unity peuvent réclamer parfois une <strong>réinitialisation</strong> des <i>layouts</i> pour s'ouvrir.</p>
</section>
<footer>
	<p>Le 29-01-2021</p>
</footer>
<script src="../../js/testParent.js"></script>
