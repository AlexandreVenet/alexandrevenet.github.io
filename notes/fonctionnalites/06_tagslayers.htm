<section>
	<h1>Tags, layers</h1>
	<p class="couleurGris">Définir des ensembles d'objets.</p>
	<div class="blocSommaire">
		<p>Sommaire</p>
		<ol id="sommaire">
			<li><a href="#acces">Accès</a></li>
			<li><a href="#tags">Tags</a></li>
			<li><a href="#layers">Layers</a></li>
			<li><a href="#etiquettesperso">Étiquettes personnelles</a></li>
		</ol>
	</div>
</section>
<section id="acces">
	<h2>Accès</h2>
	<p><i>Layers</i> et <i>tags</i> sont :</p>
	<ul>
		<li>attribués dans l'<code>Inspector</code>, dans les menus déroulants suivant le nom du <code>gameObject</code>,</li>
		<li>définis dans <code>Edit > Project settings > Tags and Layers</code>.</li>
	</ul>
	<p>Le menu <code>Layers</code> de la barre d'outils permet un accès rapide (pas d'équivalent pour les <i>tags</i>).</p>
</section>
<section id="tags">
	<h2>Tags</h2>
	<p>Les <strong><i>tags</i></strong> sont des <strong>étiquettes d'ensemble</strong> d'objets. Grâce à eux, les objets intéragissent non pas entre eux particulièrement mais selon l'ensemble dans lequels ils sont inclus.</p>
	<pre><code>
public class DemoScript : MonoBehaviour
{
	GameObject _player;

	void Start(){
		// trouver un objet avec le tag indiqué
		_player = GameObject.FindWithTag("nomTag");
	}

	void Update(){
		// se tourner en permanence vers l'objet afférent
		transform.LookAt(_player.transform);
	}
}
	</code></pre>
	<p>Quelques instructions utilisant les <i>tags</i> :</p>
	<ul>
		<li><code>FindWithTag()</code> : trouver un objet avec un <i>tag</i>,</li>
		<li><code>FindGameObjectsWithTag()</code> : trouver un <code>array</code> d'objets portant un <i>tag</i>,</li>
		<li><code>CompareTag()</code> : tel objet a-t-il ce <i>tag</i> (booléen),</li>
		<li>la propriété <code>gameObject.tag</code> pouvant être testée, récupérée, définie.</li>
	</ul>
</section>
<section id="layers">
	<h2>Layers</h2>
	<p>Les <strong><i>layers</i></strong> permettent de <strong>restreindre</strong> des fonctionnalités par ensembles d'objets. Par exemple : déterminer un ensemble d'objets invisibles à la caméra : </p>
	<ul>
		<li>créer un layer <code>ignored by camera</code>,</li>
		<li>l'attribuer à un objet,</li>
		<li>dans la caméra, dans <code>Culling Mask</code>, retirer <code>ignored by camera</code>.</li>
	</ul>
	<p>Les <i>layers</i> sont aussi utiles pour définir les interactions physiques avec la <strong>matrice de collision</strong> qui se trouve dans <code>Edit > Project Settings... > Physics</code> ou <code>Physics2D</code>. On peut ainsi autoriser ou exclure des relations entre <i>layers</i> selon les besoins. Par exemple : un objet jouable a un <code>collider</code> aux pieds en interaction avec les obstacles, et un <code>collider</code> en interaction avec des objets destructibles, les deux n'étant pas en interaction (sinon comportements étranges).</p>
</section>
<section id="etiquettesperso">
	<h2>Étiquettes personnelles</h2>
	<p>Il est possible de créer ses propres étiquettes. Par exemple, en utilisant une <code>enum</code> comme type.</p>
	<pre><code>
public enum MesTags
{
	Ogre,
	Gobelin
}
	</code></pre>
	<pre><code>
public MesTags _myTag = MesTags.Gobelin;
	</code></pre>
	<p>Autre exemple avec un <code>struct</code> (qu'on peut rendre <code>static</code> ou non selon les besoins) :</p>
	<pre><code>
public struct MesAutresTags
{
	public string OgreB = "Ogre de boue";
	public string Gobelin = "Gobe-lin carnivore";
}
	</code></pre>
	<pre><code>
if(chose.MonTag == MesAutresTags.Gobelin){ //... }
	</code></pre>
	<p>Ces données peuvent enfin être regroupées dans <strong>un même fichier script</strong> qui sert de <strong>paramètres</strong> au projet.</p>
</section>
<footer>
	<p>Le 31-05-2021</p>
</footer>
<script src="../../js/testParent.js"></script>
