<section>
	<h1>Unity Events</h1>
	<a class="lien" target="_blank" href="https://docs.unity3d.com/ScriptReference/Events.UnityEvent.html" title="Documentation officielle : Unity Events">Documentation officielle : Unity Events</a>
	<p>Les <strong><i>Unity Events</i></strong> permettent de déclarer un événement auquel viennent s'abonner des fonctions. C'est une méthode alternative aux <code>delegate</code>, <code>action</code> ou <i>observer pattern</i>.</p>
	<p>Je présente tout cela dans la catégorie <i>design pattern</i> car ces <i>Unity Events</i> présentent une structure de développement à part entière, similaire par exemple à la structure événementielle de Javascript. On peut néanmoins les utiliser plus localement : par exemple, Unity gère déjà les objets d'UI de cette manière.</p>
	<div class="blocSommaire">
		<p>Sommaire</p>
		<ol id="sommaire">
			<li><a href="#librairie">Librairie</a></li>
			<li><a href="#declarer">Déclarer l'événement</a></li>
			<li><a href="#declencher">Déclencher l'événement</a></li>
			<li><a href="#fonctions">Les fonctions</a></li>
			<li><a href="#abonner">Abonner les fonctions</a></li>
			<li><a href="#parametres">Événement à paramètres</a></li>
			<li><a href="#aboncode">Abonnement par code</a></li>
		</ol>
	</div>
</section>
<section id="librairie">
	<h2>Librairie</h2>
	<p>Une <strong>librairie</strong> est nécessaire :</p>
	<pre><code>
using UnityEngine.Events;
	</code></pre>
</section>
<section id="declarer">
	<h2>Déclarer l'événement</h2>
	<p>Créons un script de classe héritant de <code>MonoBehaviour</code> et attachons-le à un objet de la scène. <strong>Déclarons</strong> un événement. Il doit être <code>public</code> sinon il n'est pas accessible hors de la classe :</p>
	<pre><code>
public UnityEvent m_jumpEvent = new UnityEvent();
	</code></pre>
	<p>On peut aussi différer l'initialisation dans le <code>Start()</code> :</p>
	<pre><code>
public UnityEvent m_jumpEvent;

private void Start()
{
	m_jumpEvent = new UnityEvent();
}
	</code></pre>
	<p>On peut aussi verrouiller cette initialisation au cas où le champ est <code>null</code> (pas de référence) : </p>
	<pre><code>
public UnityEvent m_jumpEvent;

void Start()
{
	if (m_jumpEvent == null)
		m_jumpEvent = new UnityEvent();
}
	</code></pre>
</section>
<section id="declencher">
	<h2>Déclencher l'événement</h2>
	<p>Maintenant qu'on dispose de l'événement, il faut le <strong>déclencher</strong>. Pour cela, dans le même script, codons quelques instructions. Par précaution, on teste si l'événement a des abonnés ; si ce n'est pas le cas, alors ne rien déclencher car c'est inutile. On déclenche l'événement avec <code>Invoke()</code>.</p>
	<pre><code>
private void Update()
{
	if(Input.GetButtonDown("Jump") && m_jumpEvent != null)
		m_jumpEvent.Invoke();
}
	</code></pre>
	<p>On peut utiliser ce procédé dans d'autres gestionnaires comme <code>OnTriggerEnter()</code> par exemple.</p>
</section>
<section id="fonctions">
	<h2>Les fonctions</h2>
	<p>On va maintenant créer des <strong>fonctions</strong> qui vont se déclencher lors de l'événement. Cela signifie : lorsque l'événement aura lieu, il appellera ces fonctions. Nul besoin de multiplier les références à des objets ou composants car la méthode est ascendante vers une seule référence.</p>
	<p>Créons un autre script de classe héritant de <code>MonoBehaviour</code> et attachons-le à un objet de la scène (le même ou un autre que le précédent).</p>
	<p>Ce script doit contenir des <strong>méthodes</strong> <code>public</code> pour qu'elles soient utilisées par l'événement. Il doit être attaché à un <code>gameObject</code> car avec les <i>Unity Events</i> on ne peut utiliser ni de script non attachés à un <code>gameObject</code>, ni des classes <code>static</code>.</p>
	<p><strong>Inconvénient</strong> : ces méthodes d'admettent <strong>qu'un seul paramètre maximum</strong>.</p>
	<pre><code>
public void AfficherMessage(string message)
{
	Debug.Log(message);
}

public void HideCube(GameObject cube)
{
	cube.SetActive(false);
}
	</code></pre>
</section>
<section id="abonner">
	<h2>Abonner les fonctions</h2>
	<p>Effectuons enfin l'<strong>abonnement</strong> des fonctions à l'événement. Pour cela, dans Unity, sélectionner le <code>gameObject</code> porteur du script de l'événement : en <code>Inspector</code>, dans le composant de script, apparaît un encart du nom de l'événement. Le bouton <code>+</code> permet d'ajouter des fonctions. Alors, un bloc de contrôles apparaît :</p>
	<ul>
		<li>choix du <strong>mode de déclenchement</strong> : <code>off</code> pour aucun, <code>Runtime only</code> pour en jeu, <code>Editor and runtime</code> pour en jeu et en édition,</li>
		<li>un champ de <strong>référence</strong> dans lequel on glisse le <code>gameObject</code> porteur du script des fonctions à abonner,</li>
		<li>un troisième menu déroulant proposant les <strong>méthodes publiques par défaut pour le type de composant(s) référencé(s)</strong> et nos <strong>méthodes publiques personnelles</strong>. Si la fonction reçoit un paramètre, un champ apparaît ; dans le menu déroulant, les méthodes sont considérées <strong><i>static</i></strong> (on entre une valeur immuable).</li>
	</ul>
	<p><strong>Avantage</strong> : grande modularité côté éditeur.</p>
</section>
<section id="parametres">
	<h2>Événement à paramètres</h2>
	<p>Voyons un développement de la technique précédente : il est possible de déclarer un <strong>événement prenant des paramètres en entrée</strong>.</p>
	<p>Pour cela, il faut déclarer une classe héritant de <code>UnityEvent</code>. On peut écrire cette classe par exemple dans le même script de l'événement déjà réalisé, juste au-dessus de la définition de classe <code>MonoBehaviour</code>. Rendons cette classe d'événement visible en <code>Inspector</code> avec un <strong>attribut</strong>. Ajoutons entre chevrons les paramètres, par exemple un nombre entier et une chaîne de caractères : </p>
	<pre><code>
[System.Serializable]
public class EvenementPerso : UnityEvent&lt;int, string&gt;{}
	</code></pre>
	<p>Ensuite, déclarons l'événement dans le corps de classe <code>MonoBehaviour</code>.</p>
	<pre><code>
public EvenementPerso m_eventPerso = new EvenementPerso();
	</code></pre>
	<p>Et écrivons les instructions de déclenchement. <code>Invoke()</code> doit maintenant <strong>respecter la signature de l'événement</strong>. Par exemple :</p>
	<pre><code>
private void Update()
{
	if(Input.GetButtonDown("Fire1") && m_eventPerso != null)
		m_eventPerso.Invoke(3, "Je dis.");
}
	</code></pre>
	<p>Maintenant, côté méthodes à abonner, il faut aussi <strong>respecter la signature de l'événement</strong>. Par exemple, le code suivant affiche les valeurs utilisées lors de l'<code>Invoke()</code> de l'événement :</p>
	<pre><code>
public void DireValeursEvenement(int nbre, string texte)
{
	Debug.Log($"Méthode DireValeursEvenement : {nbre}, {texte}");
}
	</code></pre>
	<p>Il est tout à fait possible de remplacer ces valeurs : </p>
	<pre><code>
public void DireMesChoses(int nbre, string texte)
{
	nbre = 42;
	texte = "Tout est expliqué.";
	Debug.Log($"Méthode DireMesChoses : {nbre}, {texte}");
}
	</code></pre>
	<p>Enfin, la procédure d'abonnement est identique. On notera que les fonctions ainsi utilisées <strong>ne présentent pas leurs paramètres</strong> dans l'<code>Inspector</code> (pas de champ de saisie) et apparaissent sous le type <strong><i>Dynamic</i></strong> dans le menu déroulant (la valeur peut changer au cours de l'application et est liée à quelque chose).</p>
</section>
<section id="aboncode">
	<h2>Abonnement par code</h2>
	<p>L'<strong>abonnement</strong> de fonctions à l'événement peut aussi <strong>s'effectuer par code</strong>. <strong>Avantage</strong> : on n'a plus à exposer de fonctions <code>public</code>. <strong>Inconvénient</strong> : il n'y a pas de représentation visuelle dans Unity et on perd la modularité.</p>
	<p>Reprenons notre exemple précédent avec l'événement à paramètres. Ouvrons le script des fonctions.</p>
	<p>On a besoin d'une variable du type de l'événement : </p>
	<pre><code>
EvenementPerso _eventPerso;
	</code></pre>
	<p>Lors de l'initialisation de l'objet, instancier l'événement <code>public</code> et y abonner une fonction (ici le <code>gameObject</code> porteur du script est nommé «&#160;Evenements&#160;» et son script est nommé «&#160;EvenementParametres&#160;») : </p>
	<pre><code>
private void Start()
{
	_eventPerso = GameObject.Find("Evenements").GetComponent<EvenementParametres>().m_eventPerso;
	_eventPerso.AddListener(MaFonctionPrivee);
}
	</code></pre>
	<p>Codons maintenant la fonction à lancer (ici nommée «&#160;MaFonctionPrivee&#160;») qui doit respecter la signature de l'événement : </p>
	<pre><code>
void MaFonctionPrivee(int nbre, string texte)
{
	Debug.Log($"Méthode MaFonction : {nbre}, {texte}");
}
	</code></pre>
	<p>Enfin, pensons une <strong>stratégie de désabonnement</strong>, par exemple lorsque le <code>gameObject</code> est désactivé. Cela évite les erreurs lors du déclenchement de l'événement sur des références <code>null</code> : </p>
	<pre><code>
private void OnDisable()
{
	_eventPerso.RemoveListener(MaFonctionPrivee);
}
	</code></pre>
</section>
<footer>
	<p>Le 16-02-2021</p>
</footer>
<script src="../../js/testParent.js"></script>
